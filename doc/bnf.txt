-----------------------------------------
Prog                 :=      Expr
Expr                 :=      AddExpr
AddExpr              :=      MultiExpr
                     :=      AddExpr + MultiExpr
                     :=      AddExpr -  MultiExpr
MultiExpr            :=      PrimaryExpr
                     :=      MultiExpr * PrimaryExpr
                     :=      MultiExpr / PrimaryExpr
PrimaryExpr          :=      Num
-----------------------------------------
Prog                 :=      Expr
Expr                 :=      AddExpr
AddExpr              :=      MultiExpr
                     :=      AddExpr + MultiExpr
                     :=      AddExpr -  MultiExpr
MultiExpr            :=      PrimaryExpr
                     :=      MultiExpr * PrimaryExpr
                     :=      MultiExpr / PrimaryExpr
PrimaryExpr          :=      Num
                     :=      (Expr)

-----------------------------------------
Prog                 :=      Stmt*
Stmt                 :=      Expr;
Expr                 :=      Expr
Expr           :=      AddExpr
                     :=      AddExpr = Expr
AddExpr              :=      MultiExpr
                     :=      AddExpr + MultiExpr
                     :=      AddExpr -  MultiExpr
MultiExpr            :=      PrimaryExpr
                     :=      MultiExpr * PrimaryExpr
                     :=      MultiExpr / PrimaryExpr
PrimaryExpr          :=      Num
                     :=      (Expr)
                     :=      Id

-----------------------------------------
Prog                 :=      Function*
Function             :=      DeclarationSpec Declarator "{"Stmt*"}"
DeclarationSpec      :=      char | short | int | long | StructOrUnionDecl
StructOrUnionDecl    :=      struct_or_union identifier? "{" StructMember* "}"
                     :=      struct_or_union identifier
StructMember         :=      DeclarationSpec Declarator (, Declarator)* ";"
Declarator           :=      (*)* identifier TypeSuffix
TypeSuffix           :=      "("FuncArg?")"
                     :=      "["Number"]"+
                     :=      Îµ
FuncArg              :=      DeclarationSpec Declarator (, DeclarationSpec Declarator)*
Stmt                 :=      Expr?;
                     :=      IfStmt
                     :=      WhileStmt
                     :=      DoWhileStmt
                     :=      ForStmt
                     :=      BlockStmt
                     :=      ReturnStmt
                     :=      DeclarationStmt
IfStmt               :=      if "(" Expr ")" Stmt
                     :=      if "(" Expr ")" Stmt Else Stmt
WhileStmt            :=      while "(" Expr ")" Stmt
DoWhileStmt          :=      do Stmt while "(" Expr ")" ";"
ForStmt              :=      for "("Expr?;Expr?;Expr?")" Stmt
BlockStmt            :=      "{" Stmt* "}"
ReturnStmt           :=      return Expr ";"
DeclarationStmt      :=      DeclarationSpec Declarator(= Expr)? (, Declarator(= Expr)?)* ";"
                     :=      DeclarationSpec ";"
Expr                 :=      Expr
Expr           :=      EqualityExpr
                     :=      EqualityExpr = Expr
EqualityExpr         :=      RelationalExpr
                     :=      EqualityExpr == RelationalExpr
                     :=      EqualityExpr != relationalExpr
RelationalExpr       :=      AddExpr
                     :=      RelationalExpr < AddExpr
                     :=      RelationalExpr > AddExpr
                     :=      RelationalExpr <= AddExpr
                     :=      RelationalExpr >= AddExpr
AddExpr              :=      MultiExpr
                     :=      AddExpr + MultiExpr
                     :=      AddExpr -  MultiExpr
MultiExpr            :=      UnaryExpr
                     :=      MultiExpr * UnaryExpr
                     :=      MultiExpr / UnaryExpr
UnaryExpr            :=      UnaryOperator UnaryExpr
                     :=      PostfixExpr
PostfixExpr          :=      PrimaryExpr
                     :=      PrimaryExpr ("["Expr"]")
                     :=      PrimaryExpr "("ArgExprList?")"
                     :=      PrimaryExpr "." identifier
                     :=      PrimaryExpr "->" identifier
PrimaryExpr          :=      Num
                     :=      (Expr)
                     :=      Id
                     :=      "({"Stmt+"})"
                     :=      sizeof UnaryExpr
ArgExprList          :=      Expr(,Expr)*